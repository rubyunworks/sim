== Reusing Stubs via Extend

Require stub.rb library.

  require 'sim/stub'

Stubs are modules. If we look as the return value of the #stub
method we will see that it is in fact a Stub object, which
is a subclass of Module.

  obj = "VALUE"

  obj.stub.assert.kind_of?(::Sim::Stub)
  obj.stub.assert.kind_of?(Module)

That being so, we can create our own Stub modules and reuse them.

   stb = Sim::Stub.new
   stb.anycall{ "NEW VALUE" }

To apply the Stub module to an object, use #extend.

   obj.extend(stb)

And we can see that the object has in fact been stubbed.

   obj.anycall.assert == "NEW VALUE"

Once applied, we can change the stubs dynamically too.

   stb.anycall{ "ANOTHER VALUE" }
   obj.anycall.assert == "ANOTHER VALUE"

Stubs can key-off of a arguments as well. For instance:

  stb.chomp('x'){ "It is x." }
  stb.chomp('o'){ "It is o." }

  obj.chomp('x').assert == "It is x."
  obj.chomp('o').assert == "It is o."

If we need the object to return to it's original behavior,
we can remove the stub module by calling #unextend and
passing in the stub module we wish to remove.

   obj.unextend(stb)

And we can see that the object is no longer stubbed.

   expect(NameError){ obj.anycall }

Alternatively we can remove the stub module using #unstub.

   obj.stub(stb)   # reapply the stub
   obj.unstub(stb)

   expect(NameError){ obj.anycall }

As you might have surmised at this point, calling #unstub
without an argument imples +obj.remove_stub(obj.stub)+.

